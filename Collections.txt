//1
//
/*
fun main() {
    val numbers = listOf(0, 3, 8, 4, 0, 5, 5, 8, 9, 2)
    println("list:   ${numbers}")
    println("sorted: ${numbers.sorted()}")
    val setOfNumbers = numbers.toSet()
    println("set:    ${setOfNumbers}")
    val set1 = setOf(1,2,3)
    val set2 = mutableSetOf(3,2,1)
    println("$set1 == $set2: ${set1 == set2}")
    println("contains 7: ${setOfNumbers.contains(7)}")
}
*/
/*
 * fun main() {
    val peopleAges = mutableMapOf<String, Int>(
        "Fred" to 30,
        "Ann" to 23
    )
    println(peopleAges)
   peopleAges.put("Barbara", 42)
   println(peopleAges)
   peopleAges["RAKIB"]=25
    println(peopleAges)
    peopleAges["Fred"] = 31
    println(peopleAges)
    //peopleAges.map{print("${it.key} age is ${it.value}, ")}
    
   println(peopleAges.map { "${it.key} is ${it.value}" }.joinToString(", ") )
   val filteredNames = peopleAges.filter { it.value<25 }
   println(filteredNames)
}
*/
/*
 fun main() {
   // var triple: (Int) -> Int = { a: Int -> a * 3 }
    //println(triple(5))
    val triple: (Int) -> Int = { it * 3 }
    println(triple(5))
}
*/
/*
 fun main() {
    val peopleNames = listOf("Fred", "Ann", "Barbara", "Joe")
    println(peopleNames.sorted())
    var num=listOf(1,2,3,4,5,10,9,8,7,6)
    println(num.sorted())
    println(peopleNames.sortedWith { str1: String, str2: String -> str1.length - str2.length })
}
*/
/*
 fun main() {
    val words = listOf("about", "acute", "awesome", "balloon", "best", "brief", "class", "coffee", "creative")
    
    val filteredWords = words.filter { it.startsWith("b", ignoreCase = true) }
    println(filteredWords)
    
    val filteredWords2 = words.filter { it.startsWith("b", ignoreCase = true) }
    .shuffled()
    .take(2)
    println(filteredWords2)
    
    val filteredWords3 = words.filter { it.startsWith("b", ignoreCase = true) }
    .shuffled()
    .take(2).sorted()
    println(filteredWords3)
  
    
    
}
*/